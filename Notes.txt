                                                            JavaScript
                                                    ..........................
->JavaScript is a High level programming language which was developed by Branden Flck in 1994 at NetScape Navigator.
->Initial name of JS is LiveScript.
->It is used to perform validation and dynamic functionalities.
->Now a days we are using for both frontend and backend purpose.
->JavaScript is Just in time(JIT) compilation programming language which means converting source code to machince code and execute immidiately.

(Q)How to create a webpage?
Demo.html
..........
<html>
    <head>
        <title>Demonstrate</title>
        <style>.......</style>
    </head>
    <body>
        <script>
            console.log("Hello World");
        </script>
    </body>
</html>    

->Function:-
..............
->Function is set of statement which is used to perform specific task when we call.
->Adv:-Reusability of code
       Function will increse redability of code.
    
->A JavaScript function return any type of value because it is a dynamic type programming language.
->When a function not returning any value bydefault it return "undefined".
->The statement which is never execute throughout the program is known as unrechable statement.

syntax:-
........
function function_Name(){
    console.log("...");
}
function_Name();//function calling

->Identifier :-
................
->Identifier are the names which are given by the developer while coding.
->Ruels:-1)Identifier should not be a keyword.
         2)Identifier shouldn't be started with special character excluding $ and _ .
         3)Identifier shouldn't be start with digit.

->Variable :-
...............
->Variable are used for store values.
syntax:-keyword Variable_name; //Variable declaration
        Variable_name=value;   //Variable Initialization

->To create a variable we use 3 keyword in JavaScript.i.e let,const,var.
->Let and const are introduced in ES-6 version.
->Var is introduced in older version if JavaScript.
->Variable declaration is not possible but re-initialization is possible.
->If we declare a variable without initialization the default value will be assigned by JavaScript engine.
->The default value is undefined.
->JavaScript is a dynamic typed programming language.

->Dynamic Type Programming Language:-
......................................
->It means at the time variable declaration we no need to use datatype which means once we create a variable we can assign any time of value.
ex:-
....
let a=1;
a="JavaScript";
a=true;
a=undefined;

ex:-
...
<script>
    function main(){
        let a=10;
        console.log("Value of a is: "+a);//10
    }
    main();
</script> 

->DataType:-
..............
->Datatype are used to represent the type of value which we store into a variable.
->There are 2types 1)Primitive DataType
                   2)Non-Primitive DataType
1)Primitive DataType:-
........................
->This is predefined and it is 7 types i.e. Number,String,Boolean,Null,Undefined,BigInt,Symbol 
 i)Number :-
 ............>The Number datatype is used to store any numeric value, that means we can store integer or floating value.
 ex:-<script>
        function main(){
            let a=10;
            console.log(a,typeOf a);
            let b=10.5;
            console.log(b,typeOf b);
        }main();
     </script>

->log() method accepts any number of arguments.
->typeOf   is a special keyword which is used to check the datatype of a variable.
ii)String:-
............>String datatype is used to store a character or group of character.
->In JavaScript String can be represented by single or double quete or back tick '',"",``.
ex:-<script>
        function main(){
            let a="hello";
            console.log(a,typeOf a);
            let b=`world`;
            console.log(b,typeOf b);
        }main();
     </script>
     iii)Boolean:-
     ..............>Boolean type is used to store true or false values.
     ex:-<script>
        function main(){
            let gender;
            console.loog(gender,typeOf gender);
        }main();
     </script>

->If we create a variable without initialization the Initial value is undefined.
->Datatype of undefined is undefined.
->Falsy Values:-
.................>The values which are returning false when we are converting into boolean type is known as falsy values.
->Their are 6 types falsy Values i.e. false,0,null,undefined,Nan," ".
->Truth values:-
................>The values which are returning true when we are converting into boolean type is known as truth values.
->Apart from falsy values all are truth values.

iv)Null:-
............>Null is a special character or value which is represent wmpty or nothing.
->The datatype og null value is an object.
->Bug means we are not getting expected output/result.
ex:-<script>
        function main(){
            let a=null;
            console.log(a,typeOf a);
        }main();
     </script>
    
v)BigInt :-
............>BigInt datatype is used to store the large numbers which are can't be store into a number then we use BigInt.It is introduced in ES-6 version.
ex:-<script>
        function main(){
            let a=10n;
            console.log(a,typeOf a);
            let b=10.5n;
            console.log(b,typeOf b);
        }main();
     </script>  

->Operator:-
...............>Operator is used to operate in between two or more operand.
->Their are 6 types of operand present i.e Arithmatic (+,-,*,%),Relational(>,<,>=,<=,==),Logical(||,&&,=),Bitwise(|,&),Unary(++,--),conditional or teminal(?)  
->concatination:-
...................>concatination means joining or combining two or more operands.
->To perform concatination atleast one operand should be String.
->After concatination result value is String type.

->Type coercion:-
..................>Converting one tyep to another type is known as type coercion.
->ex:- 1+'1'="11" number+String=String

->NaN:-
........>NaN is a special type, which we get when the arithmatic operation is failed.
->The datatype of NaN is number.
->Type conversion:-
....................>Converting one type to another type is knowns type conversion.
ex:-
Number("10");->10
String(12);->"12"

->Difference between == & ===
..................................
->Double equal(==) is a normal comparision operator but === is not a normal comparision operator.
->== support type coercion but === not support type coercion.
->== checks the values not datatype but === checks the values and datatype also.
ex:-function main(){
    let 1=5;
    let b="5";
    if(a==b){
        console.log("Hello");
    }
    else{
        console.log("world");
    }
    if(a===b){
        console.log("Hii");
    }
    else{
        console.log("Hyy");
    }
}main();

->math.trunc() is used for remove the decimal part of a number and return only integer part.Basically we are not using business logic because it removes the decimal point.

->Looping statement:-
.....................>For iterating over the values we are using Looping concepts.
->It is 5 types i.e.(i) while Loop syntax:-initialization while(condition){//   Incr/Decr}
                    (ii)For Loop syntax:-for(initialization;updation;Incr/Decr);
                    (iii)Do-while Loop syntax:-do{//} while(condition);
                    (iv)For each Loop
                    (v)For in Loop

->break:-
..........>It is used to terminate the execution.
ex:-function main(){
    for(int i=1;i<=5;i++){
        if(i%2==0){
            break;
        }
        console.log(i);
    }
}
main();

->Continue:-
.............>Continue is used for skip the execution.
ex:-function main(){
    for(int i=1;i<=5;i++){
        if(i%2==0){
            continue;
        }
        console.log(i);
    }
}
main();

->return :-
............>The return statement is used to specfiy the value that a function should output or return back to the caller method.
ex:-function main(){
    for(int i=1;i<=5;i++){
        if(i%2==0){
            return;
        }
        console.log(i);
    }
    console.log("outside loop");
}
main();

->JavaScript function are consider as 1st class citizen or first class function, which means a 
i)A function can store into a variable.
ii)A function can return other function.
iii)A function can be passed as an another function.
ex:-
function main(){
    let greet="Happy world";
}
main();
console.log(greet);//Happy world

->A function without any name is known as anonymous function.
ex:-
let a=function(){
    console.log("Hii");
}
a();

->In JavaScript we can create 3types of function i.e.
i)Function declaration:-
..........................>Creating a function with function keyword followed function name.
syntax:- function function_name(){
        //code
    }
ii)Function Expression:-
.........................>Creating a function with function keyword and store into a Variable.
syntax:-let a=function(){
        //code
    }
iii)Array function:-
.....................>Array function is a simple way to create anonymous function.It is introduced in ES-6 version.
syntax:- let a=()=>{
        //code
    }

->Function with parameter:-
............................>Their are two types of parameter i.e. Formal and Actual
->The parameter which we pass at function declaration is known as formal parameter.
->The parameter which we pass at function call is known as actual parameter.
ex:
function main(a,b){//formal parameter
        //code
}main(10,20);//actual parameter
NOTE:-
.......
->In JavaScript parameterised function can be called with less number of arguments or equal number of arguments or more number of arguments.
->If we call with less number of arguments the default value will be undefined.
->If we call with more number of argument the required argument will take and rest ignored.
->A function which passed as an argument to another function is known as callback function.
->A function which accepting another function is known as heigher order function.
->A function which returning another function is known as heigher order function.
ex:-calc(12,2,add);
    .           .
    .           .
    .           .
heigher order  callback function

->JavaScript runtime environment:-
...................................>which provides the necessary components in order to run JavaScript programs.
->Mainly it is 4 components i.e.
  1)JS engine
  2)web API's
  3)callback queue
  4)Microtask queue
->JavaScript engine is a collection of programs which is used to execute JavaScript code.
-> JavaScript engine has 2 memory i.e. 1)Heap area 2)Call stack
->Heap area is an unstructured memory which store all the objects which is required for JavaScript application.
->Call stack is the place where JavaScript code executes with the help of execution context.
->Web API are use to provide additional functionality to JavaScript engine.
->callback queue is a data structure which is use to store callback function which are ready to execute.
->Microtask queue is use to store the callback function which has heigher proirity than the callback function which are waiting inside the callback queue.
 ->in JavaScript memory will be created for all variables and functions before single line of code get executed.
 ->If we create a variable by using var keyword Initial value is undefined.
 ->If we create a variable by using let and const keyword Initial value is uninitialized.
 ->The Initial value of function declaration is actual function.
 ->The Initial value of function Expression and actual function id depend upon keyword.

->Global Execution context:-
......................
 ->Execution context is a container where JavaScript code gets executed.
 ->Execution context will be created for every function call.
 ->An execution context have 2 phase i)Memory phase 2)Code execution phase

->JS object:-
..............>Object is a real world entity which having state and behaviour.
->In JavaScript we can create object in 2 ways.i.e. i)object literal syntax:- let objRef={
                                                                    ..........              key : value,
                                                                                            key : value
                                                                                        };
                                                    ii)object constructor syntax:- let objRef=new object();
                                                                         ..........             
->By using .notation we access static property.
->By using [] notation we access dynamic property.
ex:- 
<script>
 let Student={
        studId:"a101",
        firstName:"Uttam",
        lastName:"Sahoo",
        birthYear:2003,
        age:21,
        gender:"male"
    };
    console.log(Student);

//using .notation (objRef.propName);
let sName=Student.firstName;
console.log("Student Name = ${sName}");
let sId=Student.studId;
console.log('Student Id=${sId}');

//using [] notation (objRef["propName"])
let sLastName=Student["lastName"];
console.log("student Name=${sLastName}");
let Gender=Student["Gender"];
console.log('student Gender=${Gender}');

//Accessing Non-existing prop from an object
let stuAddress=student.address;
console.log('student Address = ${stuAddress}');
let stuMarks=student["marks"];
console.log('student Marks = ${stuMarks}');
</script>

->Strict Mode:-
................>Strict Mode is used to maintain secured JavaScript code which means we can avoid the commonly doing mistakes by developers.
ex:-
<script>
    "use strict"
    let passTest=false;
    let hasDrivingLic=false;
    passTest=true;
    if(passTest){
        hasDrivingLic=true;
    }
    console.log("Got License="+hasDrivingLic);
</script>

->Variable:-
.............>Their are 2 types of variable i.e. local and Global variable
i)local variable:-The variable which are created inside the block or inside the function those variable called as local variable.
ii)Global Variable:-The variable which are not belongs to any other block or function is known as Global variable.

->Scope:-
..........>scope means accesiability of variables.
Their are 3 types of scope in JavaScript.
i)Global scope:-
................>The variable and function which is not belongs to any function or method is known as Global scope.
ii)Function scope:-
..................>The variable or function which are created inside the block or inside the function those variable and function are accesiable within the function.
->It is also known as local scope.
->In js every function create a scope.

iii)Block scope:-
.................>The variable which are created with let or const keyword those are can be accesiable within the block.
->Blocks are creating scope from ES-6 version.

->Hoisting:-
............>Hoisting is a default behaviour or mechanism where the variable and function are available before function declaration.
->Var is hoisted and Initial value is undefined.
->let and const are hoisted but it is in temporary dead zone.
->Function declaration is hoisted and the initial value is actual function.
->Function Expression and actual function are hoisted but it depend on keyword.
->Temporary Dead Zone is a time sense the let and const variable was hoisted and it is initialized with some values, that time is known as TDZ.

->Difference between let,const,var
...................................
1)let:->let keyword is introduced in ES-6 version.
      ->let variable are having block scope.
      ->let variable are hoisted but it will be in TDZ.
      ->let variable cann't be redeclared but it can be re-initialized.

2)var:->var keyword is introduced in older version on JavaScript.
      ->var variable are having function scope.
      ->var variable are hoisted and initial value is undefined.
      ->var variable can be redeclared and it can be re-initialized.

3)const:->const keyword is introduced in ES-6 version.
        ->let variable are having block scope.
        ->let variable are hoisted but it will be in TDZ.
        ->let variable can be redeclared but it cann't be re-initialized.

->Execution context:-
......................>Every execution context can be assiciated with an object and that object will have 3 properties.
i.e. 
1)variable object variable environment.
2)scope chain gets determine.
3)this keyword will be determine.

1)variable object/environment:-
...............................
->variable environment is one of the execution context.
->variable environment is the place where the memory will be created for all the variables and functions or innner functions.
ex:- function studentDetails(id,name){
        let institute="Excelr";
        const branch="Marathahalli";
        var course="Java full stack";
        function printDetails(){
            console.log(`student Name=${name},institute=${institute}`);
        }
        printDetails();
        
        let welcome=function(){
            console.log(`Hi, ${name} Welcome To the ${institute}`);
        }
        var greet =()=>{
            console.log(`Hello, ${name} Good morning!!`);
        }
        greet();
    }studentDetails(1,"Uttam");

    2)local environment:-
    ......................>Lexical environment will created along with the every execution context.
    ->Lexical environment means the local memory along with the it parent lexical environment referance.
    ex:- let a=10;
        function abc(){
            let x=10;
            function xyz(){
                let y=30;
                console.log(x);
            }
            xyz();
        }
        abc();

    ->Lexical scope:-
    ...................>Means variable which are created outside the function can be accesiable inside the function.
    scope chaining:-
    .................In js scope chaining depends upon lexical environment.
    ->scope chain means whenever we use a variable then JavaScript engine search for that variable in current scope if it is not found then it will looking to outter scope and this process continue till globak scope.

    ->this:-
    ........>this keyword is a special variable which is one of the property of execution context.
    ->this keyword will be executed for every execution context.
    ->The value of this keyword will be assigned at runtime by JavaScript engine on execution context.
    ->In  global context this points to window object.
    ->In regular function call (declaration and Expression) this keyword points to wondow object in normal mode else it is undefined in strict mode.
    ->Arrow functions doesn't have own this keyword.In arrow functionthis points to it's parent scope.

    ->A function which attached with an object is known as method.
    
    ->Rest parameter:-
    ..................>Rest parameter introduced in ES-6 version.
    ->It is used to makes a function to accepting any number of argument as an array.
    ->To representing rest parameter we use ...
    syntax:- ...Variable_name;




